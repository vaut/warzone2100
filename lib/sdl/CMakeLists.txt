cmake_minimum_required (VERSION 3.5)
project (sdl-backend CXX)

file(GLOB HEADERS "*.h")
file(GLOB SRC "*.cpp")

if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	list(APPEND SRC "cocoa_sdl_helpers.mm" "swapinterval.mm" "cocoa_wz_menus.mm")
endif()

set(SDL2_MIN_VERSION "2.0.5")

set(_sdl2_library)
set(_sdl2_include_dir)
set(_sdl2_main_library)

# Prefer finding SDL2 using CMake Config, to properly include any dependencies / linked libraries (with complete, imported targets)
# - This should work for vcpkg-installed SDL2, as well as other installs that generate a full (proper) CMake Config,
# - and is required to properly link with a static SDL2 library (at least on Windows and macOS)
find_package(SDL2 ${SDL2_MIN_VERSION} CONFIG QUIET)
if(SDL2_FOUND)
	if (TARGET SDL2::SDL2-static)
		# Check for INTERFACE_INCLUDE_DIRECTORIES to ignore the "aliased" target that vcpkg creates
		get_target_property(_sdl2_include_dir SDL2::SDL2-static INTERFACE_INCLUDE_DIRECTORIES)
		if (_sdl2_include_dir)
			set(_sdl2_library SDL2::SDL2-static)
		endif()
	endif()
	if(NOT _sdl2_library AND TARGET SDL2::SDL2)
		# Check for INTERFACE_INCLUDE_DIRECTORIES to ignore the "aliased" target that vcpkg creates
		get_target_property(_sdl2_include_dir SDL2::SDL2 INTERFACE_INCLUDE_DIRECTORIES)
		if (_sdl2_include_dir)
			set(_sdl2_library SDL2::SDL2)
		endif()
	endif()
	if(NOT _sdl2_library)
		# Fall-back to FindSDL2 module (below)
		set(_sdl2_main_library)
	endif()
	if (TARGET SDL2::SDL2main)
		set(_sdl2_main_library SDL2::SDL2main)
	endif()

	if(_sdl2_library)
		get_target_property(_sdl2_include_dir ${_sdl2_library} INTERFACE_INCLUDE_DIRECTORIES)
		get_filename_component(_last_directory "${_sdl2_include_dir}" NAME)
		if (NOT _last_directory STREQUAL "SDL2")
			set(_sdl2_include_dir "${_sdl2_include_dir}/SDL2") # WORKAROUND
		endif()
	endif()
endif()

if(NOT _sdl2_library OR NOT SDL2_FOUND)
	# Fall-back to using the FindSDL2 module
	message( STATUS "Using FindSDL2 module" )
	find_package(SDL2 ${SDL2_MIN_VERSION} MODULE REQUIRED)

	set(_sdl2_library "${SDL2_LIBRARY}")
	set(_sdl2_include_dir "${SDL2_INCLUDE_DIR}")
	if(SDL2MAIN_FOUND)
		set(_sdl2_main_library "${SDL2MAIN_LIBRARY}")
	endif()
endif()

# Check if SDL2's "SDL_vulkan.h" is available (SDL 2.0.6+)
INCLUDE (CheckIncludeFileCXX)
set(_prior_CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES}")
set(CMAKE_REQUIRED_INCLUDES "${_sdl2_include_dir}")
CHECK_INCLUDE_FILE_CXX("SDL_vulkan.h" HAVE_SDL_VULKAN_H)
set(CMAKE_REQUIRED_INCLUDES "${_prior_CMAKE_REQUIRED_INCLUDES}")

add_library(sdl-backend ${HEADERS} ${SRC})
if(WZ_TARGET_ADDITIONAL_PROPERTIES)
	SET_TARGET_PROPERTIES(sdl-backend PROPERTIES ${WZ_TARGET_ADDITIONAL_PROPERTIES})
endif()

target_link_libraries(sdl-backend PRIVATE framework ivis-opengl)
set_property(TARGET sdl-backend PROPERTY FOLDER "lib")
message( STATUS "Linking to SDL2 library: ${_sdl2_library}" )
target_link_libraries(sdl-backend PRIVATE ${_sdl2_library})
target_include_directories(sdl-backend PRIVATE "${_sdl2_include_dir}")
if(HAVE_SDL_VULKAN_H)
	target_compile_definitions(sdl-backend PRIVATE "-DHAVE_SDL_VULKAN_H")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	if("${_sdl2_main_library}" STREQUAL "")
		message( WARNING "SDL2Main library not found. Linking will not succeed." )
	endif()
endif()
if(_sdl2_main_library)
	message( STATUS "Main target should link to SDL2Main: ${_sdl2_main_library}" )
	target_link_libraries(sdl-backend INTERFACE ${_sdl2_main_library})
else()
	message( STATUS "Not linking to SDL2Main" )
endif()

target_link_libraries(sdl-backend PRIVATE Qt5::Core Qt5::Widgets)

if((CMAKE_SYSTEM_NAME MATCHES "Windows") AND ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU") AND ${CMAKE_CROSSCOMPILING})
    target_compile_definitions(sdl-backend PRIVATE "QT_STATICPLUGIN")
endif()
